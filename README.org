#+TITLE: FUNX Python Abstract Machine  and Compilers
#+AUTHOR: jmc
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+DESCRIPTION: Information on a tentative Python implementation of FUNX
#+KEYWORDS:  FUNX, FUNXP, Nexpert, Functional Programming, Python
#+LANGUAGE:  en


* A Python-based FUNX Abstract Machine

The SECD Machine Python implementation is invoked from the command line with ~secd_run.py~.

#+BEGIN_EXAMPLE
(venv) SECD>python secd_run.py --help
usage: secd_run.py [-h] [--log LOG] [--env ENV] [--verbose]
                   [--outfile OUTFILE]
                   [infile]

funx VM. (c) jmc 2021.

positional arguments:
  infile             SECD source file

optional arguments:
  -h, --help         show this help message and exit
  --log LOG          logfile (optional)
  --env ENV          global environment (optional)
  --verbose
  --outfile OUTFILE  result of execution (optional)
#+END_EXAMPLE

Its input file is the control list for the program, usually the result of the compilation of the ~funx~ source code.

For instance, invoking:

#+BEGIN_EXAMPLE
(venv) SECD>python secd_run.py example3.secd
(6)
#+END_EXAMPLE

returns the stack when execution terminates.

In this example, the control list ~example3.secd~:
#+BEGIN_EXAMPLE
(DUM LDF ((n) LDC 1 LD n EQ SEL (LDC 1 JOIN) (LD n LDC 1 SUB LD fac AP LD n MUL JOIN) RTN) LDF ((fac) LDC 3 LD fac AP RTN) RAP STOP)
#+END_EXAMPLE

is the result of the compilation of the ~funx~ source code for the famous factorial function in ~example3.funx~:

#+BEGIN_SRC emacs-lisp
(let ((fac (lambda (n)
	     (if (eq n (quote 1)) (quote 1)
	       (mul n (fac (sub (quote 1) n)))))))
  (fac (quote 3)))
#+END_SRC

* Design Notes
** Memory management: cells and lists
The new issue brought forward by the Python implementation is of course an old problem of any Lisp implementation: memory management for cells and lists. (See abundant bibliography dating back to the sixties.) In this experimental endeavor we opted for simplicity, possibly at the cost of performance.

Each cell is a two-pointer block, aptly named the ~car~ and ~cdr~ pointers. Each pointer is a 16-bit integer index in a global Python array (~g_mem~) when positive, and if negative a 16-bit integer index (with sign reversed) in another global Python array, the symbol table (~g_symtable~), which stores all values and symbol regardless of type with possible redundancy. The symbol ~NIL~ is the unique cell with both pointers set to ~0~.

Over this simplistic data schema, the ~secd_mem.py~ memory manager provides primitives to create, modify, link and delete cells in global memory. It also provides simple search functions in the symbol table.

Initially all cells are unallocated with both pointers to ~0~. The memory manager keeps the index of the last allocated cell. Note that as the cells get allocated by the running program, this index increases until it hits the maximum size of the memory array and a ~memory full~ error is reported. (Even though some of the cells beneath the last-allocated index have been released in the mean time: this is the subject of garbage collection in the next section.)

An alternate function is provided which uses for a new cell the first empty cell found (both pointers ~0~) starting from the first cell, each time. Execution time is then longer (in average) as a linear search is performed before each new allocation.

Lists are built by "consing" a ~car~ pointing either to memory or the symbol table, according to its sign, to a ~cdr~ pointing to memory for the tail of the list.

A few symbols are initialized up front, ~NIL~ is required to sit at index ~0~ in the symbol table.

#+BEGIN_EXAMPLE
NIL	= secd_sym_get_create('nil') # Has to be equal to 0
NOP	= NIL
TRUE	= -secd_sym_get_create('True')
FALSE	= -secd_sym_get_create('False')
KW_REST	= -secd_sym_get_create('&rest')
KW_SKP	= -secd_sym_get_create('&skp')
#+END_EXAMPLE

** Garbage collection
The garbage collector in this simple implementation is from Henderson's book. Starting from the cells representing the ~S~, ~E~, ~C~ and ~D~ registers of the abstract machine it marks, all cells by following both pointers.

In a second steps all marked cells are released, i.e. both of their pointers are set back to ~0~.

** Parser
The parser provides function to translate lists from memory to printable expressions and back.

It also (experimentally) provides a translation from memory cells to ~dot~ graph representations.

** Abstract Machine
The abstract machine itself is in the ~secd_am.py~ file. Each control is implemented by a transition function operating on the memory representation of the registers.

* A Metacircular FUNX Compiler
As an initial bootstrapping step, a metacircular compiler was created, based on the above Abstract Machine. (See ~secd_comp.py~.) The metacircular compiler expects one additional argument to the input and output file, namely the control list of the ~funx~ compiler itself.

#+BEGIN_EXAMPLE
(venv) SECD>python secd_comp.py --help
usage: secd_comp.py [-h] [--log LOG] [--verbose] [--alternate ALTERNATE]
                    infile [outfile]

funx Metacircular Strict Compiler. (c) jmc 2021.

positional arguments:
  infile                funx source file
  outfile               secd compiled file

optional arguments:
  -h, --help            show this help message and exit
  --log LOG             logfile (optional)
  --verbose
  --alternate ALTERNATE
                        alternate compiler secd-file
#+END_EXAMPLE

The bootstrap file  (~compiler.secd~) was obtained by running the Emacs-based ~funx~ compiler on the ~funx~ source (~compiler.funx~) of the compiler itself. The compiler control list can be replaced, however, with the ~--alternate~ parameter in the above invocation.

This is a traditional way to explore alternative constructs in the language and extend the compiler.

#+BEGIN_NOTE
Note:
The ~funx~ source for the compiler defines the ~sedcomp~ function and evaluates the statement: ~(sedcomp (quote "%s") nil nil)~. Although ~"%s"~ is not a legal variable name in ~funx~, its purpose here is simply to be replaced by the actual source to be compiled which then appears, quoted, on top of the stack.

The metacircular compiler then substitutes the source code from the input file into the above expression and evaluates it with the Python Abstract Machine.
#+END_NOTE

For instance, using the alternate compiler control list ~comp4-1.secd~ for a variant of the language introducing new controls, such as ~SKP~:

#+BEGIN_EXAMPLE
(venv) SECD>python secd_comp.py --alternate comp4-1.secd example3.funx
(DUM LDF ((n) LDC 1 LD n EQ SEL (LDC 1 JOIN) (SKP LD n LDC 1 SUB LD fac AP LD n MUL JOIN) RTN) LDF
((fac) SKP LDC 6 LD fac AP RTN) RAP STOP)
#+END_EXAMPLE

#+BEGIN_NOTE
Note:
The ~comp4-1.secd~ control list for the variant compiler was itseld obtained by running the metacircular compiler on the source code of the variant compiler in ~comp4-1.txt~.
#+END_NOTE

* A Native FUNX Compiler
A native strict compiler is provided as ~secd_pycomp.py~, which is faster than the metacircular compiler as it relies on the underlying Python implementation for memory allocation.

#+BEGIN_EXAMPLE
(venv) SECD>python secd_pycomp.py --help
usage: secd_pycomp.py [-h] [--log LOG] [--verbose] infile [outfile]

funx Python Strict Compiler. (c) jmc 2021.

positional arguments:
  infile      funx source file
  outfile     secd compiled file

optional arguments:
  -h, --help  show this help message and exit
  --log LOG   logfile (optional)
  --verbose
#+END_EXAMPLE

So that, going back to the original factorial example above applied on 6 rather than on 3, invoking:

#+BEGIN_EXAMPLE
(venv) SECD>python secd_pycomp.py example3.funx
(DUM LDF ((n) LDC 1 LD n EQ SEL (LDC 1 JOIN) (SKP LD n LDC 1 SUB LD fac AP LD n MUL JOIN) RTN) LDF ((fac) SKP LDC 6 LD fac AP RTN) RAP STOP)
#+END_EXAMPLE

directly produces a control list which can be filed or consumed by the abstract machine. (Note the use of the ~SKP~ control to delimitate the list of arguments to a function call, a variant from the canonical ~funx~ specification.)

Therefore the piped invocation:

#+BEGIN_EXAMPLE
(venv) SECD>python secd_pycomp.py example3.funx | python secd_run.py
(720)
#+END_EXAMPLE

directly produces the expected result 720, as the top of the SECD Absract Machine stack.
