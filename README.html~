<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2021-07-18 dim. 16:49 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>FUNX Python Abstract Machine  and Compilers</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="jmc" />
<meta name="description" content="Information on a tentative Python implementation of FUNX"
 />
<meta name="keywords" content="FUNX, FUNXP, Nexpert, Functional Programming, Python" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/htmlize.css"/>
<link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/readtheorg.css"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">FUNX Python Abstract Machine  and Compilers</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orga808852">1. A Python-based FUNX Abstract Machine</a></li>
<li><a href="#org756bf07">2. Memory Management and Garbage Collection</a></li>
<li><a href="#org1691a9e">3. A Metacircular FUNX Compiler</a></li>
<li><a href="#orgd60d3cc">4. A Native FUNX Compiler</a></li>
</ul>
</div>
</div>


<div id="outline-container-orga808852" class="outline-2">
<h2 id="orga808852"><span class="section-number-2">1</span> A Python-based FUNX Abstract Machine</h2>
<div class="outline-text-2" id="text-1">
<p>
The SECD Machine Python implementation is invoked from the command line with <code>secd_run.py</code>.
</p>

<pre class="example">
(venv) SECD&gt;python secd_run.py --help
usage: secd_run.py [-h] [--log LOG] [--env ENV] [--verbose]
                   [--outfile OUTFILE]
                   [infile]

funx VM. (c) jmc 2021.

positional arguments:
  infile             SECD source file

optional arguments:
  -h, --help         show this help message and exit
  --log LOG          logfile (optional)
  --env ENV          global environment (optional)
  --verbose
  --outfile OUTFILE  result of execution (optional)
</pre>

<p>
Its input file is the control list for the program, usually the result of the compilation of the <code>funx</code> source code.
</p>

<p>
For instance, invoking:
</p>

<pre class="example">
(venv) SECD&gt;python secd_run.py example3.secd
(6)
</pre>

<p>
returns the stack when execution terminates.
</p>

<p>
In this example, the control list <code>example3.secd</code>:
</p>
<pre class="example">
(DUM LDF ((n) LDC 1 LD n EQ SEL (LDC 1 JOIN) (LD n LDC 1 SUB LD fac AP LD n MUL JOIN) RTN) LDF ((fac) LDC 3 LD fac AP RTN) RAP STOP)
</pre>

<p>
is the result of the compilation of the <code>funx</code> source code for the famous factorial function in <code>example3.funx</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #4f97d7; font-weight: bold;">let</span> ((fac (<span style="color: #4f97d7; font-weight: bold;">lambda</span> (n)
             (<span style="color: #4f97d7; font-weight: bold;">if</span> (eq n (<span style="color: #4f97d7; font-weight: bold;">quote</span> 1)) (<span style="color: #4f97d7; font-weight: bold;">quote</span> 1)
               (mul n (fac (sub (<span style="color: #4f97d7; font-weight: bold;">quote</span> 1) n)))))))
  (fac (<span style="color: #4f97d7; font-weight: bold;">quote</span> 3)))
</pre>
</div>
</div>
</div>

<div id="outline-container-org756bf07" class="outline-2">
<h2 id="org756bf07"><span class="section-number-2">2</span> Memory Management and Garbage Collection</h2>
</div>
<div id="outline-container-org1691a9e" class="outline-2">
<h2 id="org1691a9e"><span class="section-number-2">3</span> A Metacircular FUNX Compiler</h2>
<div class="outline-text-2" id="text-3">
<p>
As an initial bootstrapping step, a metacircular compiler was created, based on the above Abstract Machine. (See <code>secd_comp.py</code>.) The metacircular compiler expects one additional argument to the input and output file, namely the control list of the <code>funx</code> compiler itself.
</p>

<pre class="example">
(venv) SECD&gt;python secd_comp.py --help
usage: secd_comp.py [-h] [--log LOG] [--verbose] [--alternate ALTERNATE]
                    infile [outfile]

funx Metacircular Strict Compiler. (c) jmc 2021.

positional arguments:
  infile                funx source file
  outfile               secd compiled file

optional arguments:
  -h, --help            show this help message and exit
  --log LOG             logfile (optional)
  --verbose
  --alternate ALTERNATE
                        alternate compiler secd-file
</pre>

<p>
The bootstrap file  (<code>compiler.secd</code>) was obtained by running the Emacs-based <code>funx</code> compiler on the <code>funx</code> source (<code>compiler.funx</code>) of the compiler itself. The compiler control list can be replaced, however, with the <code>--alternate</code> parameter in the above invocation.
</p>

<p>
This is a traditional way to explore alternative constructs in the language and extend the compiler.
</p>

<div class="NOTE">
<p>
Note:
The <code>funx</code> source for the compiler defines the <code>sedcomp</code> function and evaluates the statement: <code>(sedcomp (quote "%s") nil nil)</code>. Although <code>"%s"</code> is not a legal variable name in <code>funx</code>, its purpose here is simply to be replaced by the actual source to be compiled which then appears, quoted, on top of the stack.
</p>

<p>
The metacircular compiler then substitutes the source code from the input file into the above expression and evaluates it with the Python Abstract Machine.
</p>

</div>

<p>
For instance, using the alternate compiler control list <code>comp4-1.secd</code> for a variant of the language introducing new controls, such as <code>SKP</code>:
</p>

<pre class="example">
(venv) SECD&gt;python secd_comp.py --alternate comp4-1.secd example3.funx
(DUM LDF ((n) LDC 1 LD n EQ SEL (LDC 1 JOIN) (SKP LD n LDC 1 SUB LD fac AP LD n MUL JOIN) RTN) LDF
((fac) SKP LDC 6 LD fac AP RTN) RAP STOP)
</pre>

<div class="NOTE">
<p>
Note:
The <code>comp4-1.secd</code> control list for the variant compiler was itseld obtained by running the metacircular compiler on the source code on the variant compiler in <code>comp4-1.txt</code>.
</p>

</div>
</div>
</div>

<div id="outline-container-orgd60d3cc" class="outline-2">
<h2 id="orgd60d3cc"><span class="section-number-2">4</span> A Native FUNX Compiler</h2>
<div class="outline-text-2" id="text-4">
<p>
A native strict compiler is provided as <code>secd_pycomp.py</code>, which is faster than the metacircular compiler as it relies on the underlying Python implementation for memory allocation.
</p>

<pre class="example">
(venv) SECD&gt;python secd_pycomp.py --help
usage: secd_pycomp.py [-h] [--log LOG] [--verbose] infile [outfile]

funx Python Strict Compiler. (c) jmc 2021.

positional arguments:
  infile      funx source file
  outfile     secd compiled file

optional arguments:
  -h, --help  show this help message and exit
  --log LOG   logfile (optional)
  --verbose
</pre>

<p>
So that, going back to the original factorial example above applied on 6 rather than on 3, invoking:
</p>

<pre class="example">
(venv) SECD&gt;python secd_pycomp.py example3.funx
(DUM LDF ((n) LDC 1 LD n EQ SEL (LDC 1 JOIN) (SKP LD n LDC 1 SUB LD fac AP LD n MUL JOIN) RTN) LDF ((fac) SKP LDC 6 LD fac AP RTN) RAP STOP)
</pre>

<p>
directly produces a control list which can be filed or consumed by the abstract machine. (Note the use of the <code>SKP</code> control to delimitate the list of arguments to a function call, a variant from the canonical <code>funx</code> specification.)
</p>

<p>
Therefore the piped invocation:
</p>

<pre class="example">
(venv) SECD&gt;python secd_pycomp.py example3.funx | python secd_run.py
(720)
</pre>

<p>
directly produces the expected result 720, as the top of the SECD Absract Machine stack.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: jmc</p>
<p class="date">Created: 2021-07-18 dim. 16:49</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
